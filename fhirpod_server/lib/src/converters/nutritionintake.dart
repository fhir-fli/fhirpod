import 'package:fhir/r5.dart' as client;
import 'package:fhirpod_server/src/generated/protocol.dart' as server;
client.NutritionIntake nutritionintakeutritionIntakeToServer(server.NutritionIntake resource) => client.NutritionIntake(

id: resource.id == null ? null : resource.id,
meta: resource.meta == null ? null : resource.meta,
implicitRules: resource.implicitRules == null ? null : resource.implicitRules,
implicitRulesElement: resource.implicitRulesElement == null ? null : resource.implicitRulesElement,
language: resource.language == null ? null : resource.language,
languageElement: resource.languageElement == null ? null : resource.languageElement,
text: resource.text == null ? null : resource.text,
contained: resource.contained == null ? null : resource.contained,
extension_: resource.extension_ == null ? null : resource.extension_,
modifierExtension: resource.modifierExtension == null ? null : resource.modifierExtension,
identifier: resource.identifier == null ? null : resource.identifier,
instantiatesCanonical: resource.instantiatesCanonical == null ? null : resource.instantiatesCanonical,
instantiatesUri: resource.instantiatesUri == null ? null : resource.instantiatesUri,
instantiatesUriElement: resource.instantiatesUriElement == null ? null : resource.instantiatesUriElement,
basedOn: resource.basedOn == null ? null : resource.basedOn,
partOf: resource.partOf == null ? null : resource.partOf,
status: resource.status == null ? null : resource.status,
statusElement: resource.statusElement == null ? null : resource.statusElement,
statusReason: resource.statusReason == null ? null : resource.statusReason,
code: resource.code == null ? null : resource.code,
subject: resource.subject == null ? null : resource.subject,
encounter: resource.encounter == null ? null : resource.encounter,
occurrenceDateTime: resource.occurrenceDateTime == null ? null : resource.occurrenceDateTime,
occurrenceDateTimeElement: resource.occurrenceDateTimeElement == null ? null : resource.occurrenceDateTimeElement,
occurrencePeriod: resource.occurrencePeriod == null ? null : resource.occurrencePeriod,
recorded: resource.recorded == null ? null : resource.recorded,
recordedElement: resource.recordedElement == null ? null : resource.recordedElement,
reportedBoolean: resource.reportedBoolean == null ? null : resource.reportedBoolean,
reportedBooleanElement: resource.reportedBooleanElement == null ? null : resource.reportedBooleanElement,
reportedReference: resource.reportedReference == null ? null : resource.reportedReference,
consumedItem: resource.consumedItem == null ? null : resource.consumedItem,
ingredientLabel: resource.ingredientLabel == null ? null : resource.ingredientLabel,
performer: resource.performer == null ? null : resource.performer,
location: resource.location == null ? null : resource.location,
derivedFrom: resource.derivedFrom == null ? null : resource.derivedFrom,
reason: resource.reason == null ? null : resource.reason,
note: resource.note == null ? null : resource.note,

);
